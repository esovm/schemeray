
(include "schemeray.scm")

(define tests '())

(define (register-test f expected)
  (set! tests (cons (cons f expected) tests)))

(define (line)
  (write-log "-----------------"))

(define (run-tests)
  (for-each (lambda (test)
              (line)
              (write-log "TESTING " (car test))
              (let ((res ((car test)))
                    (exp (cdr test)))
                (if (not (equal? res exp))
                    (write-log "FAILED, expected " exp ", got " res)
                    (write-log "Passed")))
              (line))
            (reverse tests)))

(define (test-triangle-intersection-depth)
  (let ((triangle `("triangle" ,(make-vec3d 1. 1. 1.) ,(make-vec3d 25. 0. 5.) ,(make-vec3d -5. 0. 5.) ,(make-vec3d 0. -20. 5.)))
        (orig (make-vec3d 0. 0. -5.))
        (dir (vec3d-unit (make-vec3d 2. 0. 1.))))
    (triangle-intersection triangle orig dir)))
(register-test test-triangle-intersection-depth 7.0710678118654755)

(define (test-sphere-reflection)
  (let* ((sphere `(sphere ,(make-vec3d .4 .6 .5) ,(make-vec3d -15. 0. 90.) 20))
         (sphere2 `(sphere ,(make-vec3d .4 .6 .5) ,(make-vec3d 15. 0. 70.) 10))
         (orig (make-vec3d 0. 0. 0.))
         (dir (make-vec3d 0. 0. 1.))
         (-dir (vec3d-inverse dir))
         (d (sphere-intersection sphere orig dir))
         (point (vec3d-add orig (vec3d-scalar-mul dir d)))
         (n (obj-normal sphere point))
         (r (vec3d-unit (vec3d-sub dir (vec3d-scalar-mul n (* 2 (vec3d-dot dir n))))))
         (d2 (sphere-intersection sphere2 point r))
         (point2 (vec3d-add point (vec3d-scalar-mul r d2)))
         (n2 (obj-normal sphere2 point2)))
    (write-log "d: " d)
    (write-log "point: " point)
    (write-log "n: " n)
    (write-log "r: " r)
    (write-log "d2: " d2)
    (write-log "point2: " point2)
    (write-log "n2: " n2)
    0))
(register-test test-sphere-reflection 0)

(run-tests)
